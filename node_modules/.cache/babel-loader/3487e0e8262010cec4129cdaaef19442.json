{"ast":null,"code":"import Room from \"../models/Room\";\n\nfunction RoomsService(observer) {\n  let roomsList = [new Room({\n    roomId: 'Room1',\n    meetings: []\n  }), new Room({\n    roomId: 'Room2',\n    meetings: []\n  }), new Room({\n    roomId: 'Room3',\n    meetings: []\n  }), new Room({\n    roomId: 'Room4',\n    meetings: []\n  }), new Room({\n    roomId: 'Room5',\n    meetings: []\n  }), new Room({\n    roomId: 'Room6',\n    meetings: []\n  }), new Room({\n    roomId: 'Room7',\n    meetings: []\n  }), new Room({\n    roomId: 'Room8',\n    meetings: []\n  }), new Room({\n    roomId: 'Room9',\n    meetings: []\n  }), new Room({\n    roomId: 'Room10',\n    meetings: []\n  })];\n\n  this.getRooms = () => {\n    return roomsList.slice();\n  };\n\n  this.getAvailability = (roomId, startTime, endTime) => {\n    const room = this.getRoom(roomId);\n    return !room.getMeetings().some(meeting => {\n      return startTime.isBetween(meeting.getStartTime(), meeting.getEndTime()) || endTime.isBetween(meeting.getStartTime(), meeting.getEndTime());\n    });\n  };\n\n  this.getRoom = roomId => {\n    return roomsList.find(room => room.getRoomId() === roomId);\n  };\n\n  this.bookRoom = (roomId, meeting) => {\n    const isAvailable = this.getAvailability(meeting.getDate(), meeting.getStartTime(), meeting.getEndTIme());\n\n    if (isAvailable) {//book room\n    } else {\n      observer.errorBookingRoom('Not available!!');\n    }\n  };\n}\n\nexport default RoomsService;","map":{"version":3,"sources":["/Users/scoda/Desktop/RoomBookingReact/roombooking/src/services/RoomsService.js"],"names":["Room","RoomsService","observer","roomsList","roomId","meetings","getRooms","slice","getAvailability","startTime","endTime","room","getRoom","getMeetings","some","meeting","isBetween","getStartTime","getEndTime","find","getRoomId","bookRoom","isAvailable","getDate","getEndTIme","errorBookingRoom"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,gBAAjB;;AAEA,SAASC,YAAT,CAAsBC,QAAtB,EAAgC;AAE5B,MAAIC,SAAS,GAAG,CACZ,IAAIH,IAAJ,CAAS;AACLI,IAAAA,MAAM,EAAE,OADH;AAELC,IAAAA,QAAQ,EAAE;AAFL,GAAT,CADY,EAKZ,IAAIL,IAAJ,CAAS;AACLI,IAAAA,MAAM,EAAE,OADH;AAELC,IAAAA,QAAQ,EAAE;AAFL,GAAT,CALY,EASZ,IAAIL,IAAJ,CAAS;AACLI,IAAAA,MAAM,EAAE,OADH;AAELC,IAAAA,QAAQ,EAAE;AAFL,GAAT,CATY,EAaZ,IAAIL,IAAJ,CAAS;AACLI,IAAAA,MAAM,EAAE,OADH;AAELC,IAAAA,QAAQ,EAAE;AAFL,GAAT,CAbY,EAiBZ,IAAIL,IAAJ,CAAS;AACLI,IAAAA,MAAM,EAAE,OADH;AAELC,IAAAA,QAAQ,EAAE;AAFL,GAAT,CAjBY,EAqBZ,IAAIL,IAAJ,CAAS;AACLI,IAAAA,MAAM,EAAE,OADH;AAELC,IAAAA,QAAQ,EAAE;AAFL,GAAT,CArBY,EAyBZ,IAAIL,IAAJ,CAAS;AACLI,IAAAA,MAAM,EAAE,OADH;AAELC,IAAAA,QAAQ,EAAE;AAFL,GAAT,CAzBY,EA6BZ,IAAIL,IAAJ,CAAS;AACLI,IAAAA,MAAM,EAAE,OADH;AAELC,IAAAA,QAAQ,EAAE;AAFL,GAAT,CA7BY,EAiCZ,IAAIL,IAAJ,CAAS;AACLI,IAAAA,MAAM,EAAE,OADH;AAELC,IAAAA,QAAQ,EAAE;AAFL,GAAT,CAjCY,EAqCZ,IAAIL,IAAJ,CAAS;AACLI,IAAAA,MAAM,EAAE,QADH;AAELC,IAAAA,QAAQ,EAAE;AAFL,GAAT,CArCY,CAAhB;;AA2CA,OAAKC,QAAL,GAAgB,MAAM;AAClB,WAAOH,SAAS,CAACI,KAAV,EAAP;AACH,GAFD;;AAIA,OAAKC,eAAL,GAAuB,CAACJ,MAAD,EAASK,SAAT,EAAoBC,OAApB,KAAgC;AAEnD,UAAMC,IAAI,GAAG,KAAKC,OAAL,CAAaR,MAAb,CAAb;AAEA,WAAO,CAACO,IAAI,CAACE,WAAL,GAAmBC,IAAnB,CAAyBC,OAAD,IAAa;AACzC,aAAQN,SAAS,CAACO,SAAV,CAAoBD,OAAO,CAACE,YAAR,EAApB,EAA4CF,OAAO,CAACG,UAAR,EAA5C,KACJR,OAAO,CAACM,SAAR,CAAkBD,OAAO,CAACE,YAAR,EAAlB,EAA0CF,OAAO,CAACG,UAAR,EAA1C,CADJ;AAEH,KAHO,CAAR;AAIH,GARD;;AAUA,OAAKN,OAAL,GAAgBR,MAAD,IAAY;AACvB,WAAOD,SAAS,CAACgB,IAAV,CAAgBR,IAAD,IAAUA,IAAI,CAACS,SAAL,OAAqBhB,MAA9C,CAAP;AACH,GAFD;;AAIA,OAAKiB,QAAL,GAAgB,CAACjB,MAAD,EAASW,OAAT,KAAqB;AACjC,UAAMO,WAAW,GAAG,KAAKd,eAAL,CACIO,OAAO,CAACQ,OAAR,EADJ,EAEIR,OAAO,CAACE,YAAR,EAFJ,EAGIF,OAAO,CAACS,UAAR,EAHJ,CAApB;;AAMA,QAAGF,WAAH,EAAgB,CAChB;AACC,KAFD,MAIK;AACDpB,MAAAA,QAAQ,CAACuB,gBAAT,CAA0B,iBAA1B;AACH;AAEJ,GAfD;AAgBH;;AAGD,eAAexB,YAAf","sourcesContent":["import Room from \"../models/Room\";\n\nfunction RoomsService(observer) {\n\n    let roomsList = [\n        new Room({\n            roomId: 'Room1',\n            meetings: []\n        }),\n        new Room({\n            roomId: 'Room2',\n            meetings: []\n        }),\n        new Room({\n            roomId: 'Room3',\n            meetings: []\n        }),\n        new Room({\n            roomId: 'Room4',\n            meetings: []\n        }),\n        new Room({\n            roomId: 'Room5',\n            meetings: []\n        }),\n        new Room({\n            roomId: 'Room6',\n            meetings: []\n        }),\n        new Room({\n            roomId: 'Room7',\n            meetings: []\n        }),\n        new Room({\n            roomId: 'Room8',\n            meetings: []\n        }),\n        new Room({\n            roomId: 'Room9',\n            meetings: []\n        }),\n        new Room({\n            roomId: 'Room10',\n            meetings: []\n        }),\n    ];\n\n    this.getRooms = () => {\n        return roomsList.slice();\n    };\n\n    this.getAvailability = (roomId, startTime, endTime) => {\n\n        const room = this.getRoom(roomId);\n\n        return !room.getMeetings().some((meeting) => {\n            return (startTime.isBetween(meeting.getStartTime(), meeting.getEndTime()) ||\n                endTime.isBetween(meeting.getStartTime(), meeting.getEndTime()))\n        });\n    };\n\n    this.getRoom = (roomId) => {\n        return roomsList.find((room) => room.getRoomId() === roomId)\n    };\n\n    this.bookRoom = (roomId, meeting) => {\n        const isAvailable = this.getAvailability(\n                                meeting.getDate(),\n                                meeting.getStartTime(),\n                                meeting.getEndTIme()\n                            );\n\n        if(isAvailable) {\n        //book room\n        }\n\n        else {\n            observer.errorBookingRoom('Not available!!')\n        }\n\n    }\n}\n\n\nexport default RoomsService\n"]},"metadata":{},"sourceType":"module"}